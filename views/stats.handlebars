<h1><a href="/"><img src="img/logo.png"></a>Spaced Repetition Flashcards</h1>
<div class="status">
<table>
<tr><th>New cards per day:</th><td>{{newCardsPerDay}}</td></tr>
<tr><th>Cards seen:</th><td>{{cardsSeen}}</td></tr>
<tr><th>Cards by Stage:</th
><td><span title="Unseen">{{countUI}}</span> /
<span title="New">{{countCI}}</span> /
<span title="Learning">{{countCC}}</span> /
<span title="Mature">{{countUC}}</span> /
<span title="Mastered">{{countM}}</span></td></tr>
<tr><th>Percent correct:</th><td>{{percentCorrect}}%</td></tr>
<tr><th>Average time per review:</th><td>{{averageStudyTimePerReview}} (sec)</td></tr>
<tr><th>Cards today:</th
><td><span title="Cards reviewed today">{{cardsViewedToday}}</span> /
<span title="Cards due later today">{{dueCount}}</span></td></tr
><tr><th>New cards per day:</th
><td><span title="New cards today">{{newCardsSeen}}</span> /
<span title="Average new cards per day">{{averageNewCards}}</span></td></tr
><tr><th>Reviews per New Card:</th><td><span title="Reviews until next new card">{{statsNext24Hours.reviewsToNextNew}}</span> / <span title="Minimum reviews between new cards">{{statsNext24Hours.minReviews}}</span></td></tr>
<tr><th>Study time today:</th><td>{{studyTimeToday}} (hh:mm:ss)</td></tr>
<tr><th>Average study time per day:</th><td>{{averageStudyTimePerDay}} (hh:mm:ss)</td></tr>
<tr><th>Time to earliest due card:</th><td>{{timeToNextDue}} (hh:mm:ss)</td></tr>
</table>
</div>
<div class="charts">

<h3>New Cards per day</h3>
<div id="newCardsPerDay" class="chart"></div>

<h3>Card Reviews per day</h3>
<div id="cardViewsPerDay" class="chart"></div>

<h3>Minutes of Study per day</h3>
<div id="minutesStudiedPerDay" class="chart"></div>

<h3>Percent Correct</h3>
<div id="percentCorrect" class="chart"></div>

<h3>Matured &amp; Lapsed</h3>
<div id="matured" class="chart"></div>
</div>

<h3>Cards Due per day</h3>
<div id="cardsDuePerDay" class="chart"></div>

<h3>Cards per interval</h3>
<div id="cardsPerInterval" class="chart"></div>

<div class="buttons">
<a href="/" class="default_action"><button>Home</button></a>
</div>
<script src="/js/plotly-latest.min.js" charset="utf-8"></script>
<script>
  let cardViewsPerDay = document.getElementById('cardViewsPerDay');
  if (cardViewsPerDay) {
    Plotly.newPlot(cardViewsPerDay,
      [ {{{json charts.chartCardViewsPerDay}}} ], {
        autosize: true,
        margin: {
          t: 10,
          b: 10,
          l: 10,
          r: 10
        },
        yaxis: { title: 'reviews', automargin: true },
        xaxis: { title: 'date', automargin: true }
      }
    );
  }

  let minutesStudiedPerDay = document.getElementById('minutesStudiedPerDay');
  if (minutesStudiedPerDay) {
    Plotly.newPlot(minutesStudiedPerDay,
      [ {{{json charts.chartMinutesStudiedPerDay}}} ], {
        autosize: true,
        margin: {
          t: 10,
          b: 10,
          l: 10,
          r: 10
        },
        yaxis: { title: 'min', automargin: true },
        xaxis: { title: 'date', automargin: true }
      }
    );
  }

  let percentCorrect = document.getElementById('percentCorrect');
  if (percentCorrect) {
    Plotly.newPlot(percentCorrect,
      [ {{{json charts.chartPercentCorrect}}} ], {
        autosize: true,
        margin: {
          t: 10,
          b: 10,
          l: 10,
          r: 10
        },
        yaxis: { title: 'percent', automargin: true },
        xaxis: { title: 'date', automargin: true }
      }
    );
  }

  let newCardsPerDay  = document.getElementById('newCardsPerDay');
  if (newCardsPerDay) {
    Plotly.newPlot(newCardsPerDay ,
      [ {{{json charts.chartNewCardsPerDay}}} ], {
        autosize: true,
        margin: {
          t: 10,
          b: 10,
          l: 10,
          r: 10
        },
        yaxis: { title: 'cards', automargin: true },
        xaxis: { title: 'date', automargin: true }
      }
    );
  }

  let cardsDuePerDay = document.getElementById('cardsDuePerDay');
  if (cardsDuePerDay) {
    Plotly.newPlot(cardsDuePerDay,
      [ {{{json charts.chartCardsDuePerDay}}} ], {
        autosize: true,
        margin: {
          t: 10,
          b: 10,
          l: 10,
          r: 10
        },
        yaxis: { title: 'cards', automargin: true },
        xaxis: { title: 'day', automargin: true }
      }
    );
  }

  const intervalData = [
    {{{json charts.chartCardsPerLastInterval}}},
    {{{json charts.chartCardsPerInterval}}}
  ];
  intervalData[0].line = {
    color: 'rgb(185, 213, 232)'
  };
  intervalData[1].line = {
    color: 'rgb(31, 119, 180)'
  };
  let cardsPerInterval = document.getElementById('cardsPerInterval');
  if (cardsPerInterval) {
    Plotly.newPlot(cardsPerInterval,
      intervalData, {
        autosize: true,
        margin: {
          t: 10,
          b: 10,
          l: 10,
          r: 10
        },
        yaxis: { title: 'cards', automargin: true },
        xaxis: { title: 'days', automargin: true },
        legend: {
          orientation: 'h',
          x: 0.2,
          xanchor: 'left',
          y: 1.15
        }
      } 
    );
  }

  const chart6Data = [
    {{{json charts.chartMatureTrace1}}},
    {{{json charts.chartMatureTrace2}}},
    {{{json charts.chartMatureTrace3}}},
    {{{json charts.chartMatureTrace4}}}
  ];
  let maxy1 = -Infinity;
  let miny1 = Infinity;
  let maxy2 = -Infinity;
  for (let i = chart6Data[0].y.length; i > 0; i--) {
    if (chart6Data[0].y[i] < miny1) miny1 = chart6Data[0].y[i];
    if (chart6Data[1].y[i] > maxy1) maxy1 = chart6Data[1].y[i];
    if (chart6Data[2].y[i] > maxy1) maxy1 = chart6Data[2].y[i];
    if (chart6Data[3].y[i] > maxy2) maxy2 = chart6Data[3].y[i];
  }
  const miny2 = maxy2 * miny1 / maxy1;
  const r1max = maxy1 + (maxy1 - miny1) * 0.05;
  const r1min = miny1 - (maxy1 - miny1) * 0.05;
  const r2max = maxy2 + (maxy2 - miny2) * 0.05;
  const r2min = miny2 - (maxy2 - miny2) * 0.05;
  chart6Data[0].line = {
    color: 'rgb(250, 200, 0)'
  };
  chart6Data[1].line = {
    color: 'rgb(256, 50, 50)'
  };
  chart6Data[2].line = {
    color: 'rgb(50, 128, 50)'
  };
  chart6Data[3].line = {
    color: 'rgb(100, 100, 200)'
  };

  let matured = document.getElementById('matured');
  if (matured) {
    Plotly.newPlot(matured,
      chart6Data, {
        autosize: true,
        margin: {
          t: 10,
          b: 10,
          l: 10,
          r: 10
        },
        xaxis: { title: 'date', automargin: true },
        yaxis: {
          title: 'matured, lapsed, net (cards)',
          range: [ r1min, r1max ],
          automargin: true
        },
        yaxis2: {
          title: 'cumulative (cards)',
          overlaying: 'y',
          side: 'right',
          range: [ r2min, r2max ],
          automargin: true
        },
        legend: {
          orientation: 'h',
          x: 0.2,
          xanchor: 'left',
          y: 1.1
        }
      }
    );
  }

</script>
